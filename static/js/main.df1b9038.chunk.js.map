{"version":3,"sources":["styles/App.module.scss","store/types.ts","components/Select.tsx","store/actions/weatherActions.ts","components/Weather.tsx","App.tsx","store/reducers/weatherReducer.ts","store/store.ts","index.tsx","styles/Weather.module.scss","styles/Select.module.scss"],"names":["module","exports","FETCH_WEATHER","LOADING","ERROR","Select","dispatch","useDispatch","useState","city","setCity","units","setUnits","className","styles","container","form","onSubmit","event","preventDefault","setTimeout","type","a","fetch","res","ok","json","data","Error","message","payload","fetchWeather","name","onChange","currentTarget","value","submit","Weather","main","weather","info","icon","rain","snow","fog","Math","round","temp","src","alt","App","weatherData","useSelector","state","loading","error","app","style","color","initialState","weatherReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df1b9038.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2sg6c\"};","export const FETCH_WEATHER = 'FETCH_WEATHER';\r\nexport const LOADING = 'LOADING';\r\nexport const ERROR = 'ERROR';\r\n\r\nexport interface WeatherArray {\r\n  icon: string;\r\n  main: string;\r\n}\r\n\r\nexport interface WeatherData {\r\n  main: {\r\n    temp: number;\r\n  };\r\n  weather: WeatherArray[];\r\n  name: string;\r\n  units: string;\r\n}\r\n\r\nexport interface WeatherError {\r\n  cod: string;\r\n  message: string;\r\n}\r\n\r\nexport interface WeatherState {\r\n  data: WeatherData | null;\r\n  loading: boolean;\r\n  error: string;\r\n}\r\n\r\ninterface FetchWeatherAction {\r\n  type: typeof FETCH_WEATHER;\r\n  payload: WeatherData;\r\n}\r\n\r\ninterface LoadingAction {\r\n  type: typeof LOADING;\r\n}\r\n\r\ninterface ErrorAction {\r\n  type: typeof ERROR;\r\n  payload: string;\r\n}\r\n\r\nexport type WeatherAction = FetchWeatherAction | LoadingAction | ErrorAction;\r\n","import { FC, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchWeather, loading } from '../store/actions/weatherActions';\r\nimport styles from '../styles/Select.module.scss';\r\n\r\nconst Select: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [city, setCity] = useState('London');\r\n  const [units, setUnits] = useState('standard');\r\n\r\n  const cityHandler = (event: FormEvent<HTMLSelectElement>) => {\r\n    setCity(event.currentTarget.value);\r\n  };\r\n  const unitsHandler = (event: FormEvent<HTMLSelectElement>) => {\r\n    setUnits(event.currentTarget.value);\r\n  };\r\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setTimeout(() => {\r\n      dispatch(loading());\r\n      dispatch(fetchWeather(city, units));\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h3>Choose city</h3>\r\n      <form className={styles.form} onSubmit={submitHandler}>\r\n        <select name=\"city\" onChange={cityHandler}>\r\n          <option value=\"London\">London</option>\r\n          <option value=\"Kyiv\">Kyiv</option>\r\n          <option value=\"Stockholm\">Stockholm</option>\r\n        </select>\r\n        <select name=\"unit\" onChange={unitsHandler}>\r\n          <option value=\"standard\">Kelvin</option>\r\n          <option value=\"metric\">Celsius</option>\r\n          <option value=\"imperial\">Fahrenheit</option>\r\n        </select>\r\n        <button className={styles.submit}>Show weather</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n  FETCH_WEATHER,\r\n  LOADING,\r\n  ERROR,\r\n  WeatherAction,\r\n  WeatherData,\r\n  WeatherError,\r\n} from '../types';\r\nimport { RootState } from '../store';\r\n\r\nexport const fetchWeather = (\r\n  city: string,\r\n  units: string\r\n): ThunkAction<void, RootState, null, WeatherAction> => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=410edb780fb8bb31477b1315756c4f06&units=${units}`\r\n      );\r\n      if (!res.ok) {\r\n        const data: WeatherError = await res.json();\r\n        throw new Error(data.message);\r\n      }\r\n      const data: WeatherData = await res.json();\r\n      data.units = units;\r\n      dispatch({\r\n        type: FETCH_WEATHER,\r\n        payload: data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const loading = (): WeatherAction => {\r\n  return {\r\n    type: LOADING,\r\n  };\r\n};\r\n\r\nexport const makeError = (): WeatherAction => {\r\n  return {\r\n    type: ERROR,\r\n    payload: '',\r\n  };\r\n};\r\n","import { FC } from 'react';\r\nimport { WeatherData } from '../store/types';\r\nimport styles from '../styles/Weather.module.scss';\r\n\r\ninterface WeatherProps {\r\n  data: WeatherData;\r\n}\r\n\r\nconst Weather: FC<WeatherProps> = ({ data }) => {\r\n  const { name, main, weather, units } = data;\r\n  const info = weather[0].main;\r\n  const icon = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;\r\n  return (\r\n    <div\r\n      className={`${styles.container} ${\r\n        info === 'Rain'\r\n          ? styles.rain\r\n          : info === 'Snow'\r\n          ? styles.snow\r\n          : styles.fog\r\n      }`}\r\n    >\r\n      <article className={styles.weather}>\r\n        <h1>{name}</h1>\r\n        <h3>{Math.round(main.temp)} {units === 'standard' ? 'K' : units === 'metric' ? '°C' : '°F'}</h3>\r\n        <h3>{info}</h3>\r\n        <img src={icon} alt=\"icon\" />\r\n      </article>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport Select from './components/Select';\nimport Weather from './components/Weather';\nimport { RootState } from './store/store';\nimport styles from './styles/App.module.scss';\n\nconst App: FC = () => {\n  const weatherData = useSelector((state: RootState) => state.data);\n  const loading = useSelector((state: RootState) => state.loading);\n  const error = useSelector((state: RootState) => state.error);\n  return (\n    <div className={styles.app}>\n      <Select />\n      {loading ? (\n        <h2>Loading...</h2>\n      ) : (\n        weatherData && <Weather data={weatherData} />\n      )}\n      {error ? <h5 style={{ color: 'red' }}>{error}</h5> : ''}\n    </div>\n  );\n};\n\nexport default App;\n","import {\r\n  WeatherState,\r\n  FETCH_WEATHER,\r\n  LOADING,\r\n  WeatherAction,\r\n  ERROR,\r\n} from '../types';\r\n\r\nconst initialState: WeatherState = {\r\n  data: null,\r\n  loading: false,\r\n  error: '',\r\n};\r\n\r\nconst weatherReducer = (\r\n  state = initialState,\r\n  action: WeatherAction\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case FETCH_WEATHER:\r\n      return {\r\n        data: action.payload,\r\n        loading: false,\r\n        error: '',\r\n      };\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport weatherReducer from './reducers/weatherReducer';\r\n\r\nconst store = createStore(\r\n  weatherReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof weatherReducer>;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/store';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__2T4Ym\",\"weather\":\"Weather_weather__26AdQ\",\"rain\":\"Weather_rain__2_Mbm\",\"fog\":\"Weather_fog__1MVW6\",\"snow\":\"Weather_snow__2J_py\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Select_container__248tO\",\"form\":\"Select_form__JSnjP\",\"submit\":\"Select_submit__3pwfa\"};"],"sourceRoot":""}